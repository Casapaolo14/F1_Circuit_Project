winnersAllRac
raceWinners <- resultsF1 %>% filter(position == 1) %>% select(raceId, driverId)
#Driver ID and Name [DRIVERID, SURNAME]
driverIdName = driversF1 %>% select(driverId, surname)
#Winners of Allowed Races [RACEID, DRIVERID, SURNAME]
winnersAllRac <- raceWinners %>% inner_join(driverIdName, by = "driverId")
winnersAllRac
library(readr)
library(dplyr)
library(tidyverse)
# DATA imported from CSV files
circuitsF1 <- read.csv("C:/Users/paolo/Desktop/F1_Circuit_Project/data/circuits.csv", header = TRUE, stringsAsFactors=FALSE)
racesF1 <- read.csv("C:/Users/paolo/Desktop/F1_Circuit_Project/data/races.csv", header = TRUE, stringsAsFactors=FALSE)
resultsF1 <- read.csv("C:/Users/paolo/Desktop/F1_Circuit_Project/data/results.csv", header = TRUE, stringsAsFactors=FALSE)
driversF1 <- read.csv("C:/Users/paolo/Desktop/F1_Circuit_Project/data/drivers.csv", header = TRUE, stringsAsFactors=FALSE)
############################ CIRCUITS AND RACES JOINED
#JOIN Races x Circuits
circIdLoc = circuitsF1 %>% select(circuitId, location)
racesIdCId = racesF1 %>% select(raceId, circuitId)
# [CIRCUITID, LOCATION, RACEID]
circXrac <- circIdLoc %>% inner_join(racesIdCId, by = "circuitId")
############################ RACE TO USE, CONNECT WITH CIRCUITID
#Number of races in a circuit [LOCATION, CIRCUITID]
raceCount <- count(circXrac, location, circuitId, sort = TRUE)
#RACE TO USE [LOCATION, CIRCUITID, N (of races)]
allowedRaces <- raceCount %>% filter(n >= 10)
allowedRaces
############################ WINNERS PER RACE, CONNECTED TO RACEID WITH DRIVERID
#ALL WINNERS PER RACE [RACEID, DRIVERID]
raceWinners <- resultsF1 %>% filter(position == 1) %>% select(raceId, driverId)
#Driver ID and Name [DRIVERID, SURNAME]
driverIdName = driversF1 %>% select(driverId, surname)
#Winners of Allowed Races [RACEID, DRIVERID, SURNAME]
winnersAllRac <- raceWinners %>% inner_join(driverIdName, by = "driverId")
winnersAllRac
library(readr)
library(dplyr)
library(tidyverse)
# DATA imported from CSV files
circuitsF1 <- read.csv("C:/Users/paolo/Desktop/F1_Circuit_Project/data/circuits.csv", header = TRUE, stringsAsFactors=FALSE)
racesF1 <- read.csv("C:/Users/paolo/Desktop/F1_Circuit_Project/data/races.csv", header = TRUE, stringsAsFactors=FALSE)
resultsF1 <- read.csv("C:/Users/paolo/Desktop/F1_Circuit_Project/data/results.csv", header = TRUE, stringsAsFactors=FALSE)
driversF1 <- read.csv("C:/Users/paolo/Desktop/F1_Circuit_Project/data/drivers.csv", header = TRUE, stringsAsFactors=FALSE)
############################ CIRCUITS AND RACES JOINED
#JOIN Races x Circuits
circIdLoc = circuitsF1 %>% select(circuitId, location)
racesIdCId = racesF1 %>% select(raceId, circuitId)
# [CIRCUITID, LOCATION, RACEID]
circXrac <- circIdLoc %>% inner_join(racesIdCId, by = "circuitId")
############################ CIRCUIT TO USE, CONNECT WITH CIRCUITID
#Number of races in a circuit [LOCATION, CIRCUITID]
raceCount <- count(circXrac, location, circuitId, sort = TRUE)
#RACE TO USE [LOCATION, CIRCUITID, N (of races)]
allowedCircuit <- raceCount %>% filter(n >= 10)
allowedCircuit
############################ WINNERS PER RACE, CONNECTED TO RACEID WITH DRIVERID
#ALL WINNERS PER RACE [RACEID, DRIVERID]
raceWinners <- resultsF1 %>% filter(position == 1) %>% select(raceId, driverId, circuitId)
#Driver ID and Name [DRIVERID, SURNAME]
driverIdName = driversF1 %>% select(driverId, surname)
#Winners of Allowed Races [RACEID, DRIVERID, SURNAME]
winnersAllCirc <- raceWinners %>% inner_join(driverIdName, by = "driverId")
winnersAllCirc
library(readr)
library(dplyr)
library(tidyverse)
# DATA imported from CSV files
circuitsF1 <- read.csv("C:/Users/paolo/Desktop/F1_Circuit_Project/data/circuits.csv", header = TRUE, stringsAsFactors=FALSE)
racesF1 <- read.csv("C:/Users/paolo/Desktop/F1_Circuit_Project/data/races.csv", header = TRUE, stringsAsFactors=FALSE)
resultsF1 <- read.csv("C:/Users/paolo/Desktop/F1_Circuit_Project/data/results.csv", header = TRUE, stringsAsFactors=FALSE)
driversF1 <- read.csv("C:/Users/paolo/Desktop/F1_Circuit_Project/data/drivers.csv", header = TRUE, stringsAsFactors=FALSE)
############################ CIRCUITS AND RACES JOINED
#JOIN Races x Circuits
circIdLoc = circuitsF1 %>% select(circuitId, location)
racesIdCId = racesF1 %>% select(raceId, circuitId)
# [CIRCUITID, LOCATION, RACEID]
circXrac <- circIdLoc %>% inner_join(racesIdCId, by = "circuitId")
############################ CIRCUIT TO USE, CONNECT WITH CIRCUITID
#Number of races in a circuit [LOCATION, CIRCUITID]
raceCount <- count(circXrac, location, circuitId, sort = TRUE)
#RACE TO USE [LOCATION, CIRCUITID, N (of races)]
allowedCircuit <- raceCount %>% filter(n >= 10)
allowedCircuit
############################ WINNERS PER RACE, CONNECTED TO RACEID WITH DRIVERID
#ALL WINNERS PER RACE [RACEID, DRIVERID]
raceWinners <- resultsF1 %>% filter(position == 1) %>% select(raceId, driverId)
#Driver ID and Name [DRIVERID, SURNAME]
driverIdName = driversF1 %>% select(driverId, surname)
#Winners of Allowed Races [RACEID, DRIVERID, SURNAME]
winnersAllCirc <- raceWinners %>% inner_join(driverIdName, by = "driverId")
winnersAllCirc
racesIdCId
raceCount
circXrac
winnersRaceID <- winnersAllCirc %>% inner_join(cicXrac)
winnersRaceID
library(readr)
library(dplyr)
library(tidyverse)
# DATA imported from CSV files
circuitsF1 <- read.csv("C:/Users/paolo/Desktop/F1_Circuit_Project/data/circuits.csv", header = TRUE, stringsAsFactors=FALSE)
racesF1 <- read.csv("C:/Users/paolo/Desktop/F1_Circuit_Project/data/races.csv", header = TRUE, stringsAsFactors=FALSE)
resultsF1 <- read.csv("C:/Users/paolo/Desktop/F1_Circuit_Project/data/results.csv", header = TRUE, stringsAsFactors=FALSE)
driversF1 <- read.csv("C:/Users/paolo/Desktop/F1_Circuit_Project/data/drivers.csv", header = TRUE, stringsAsFactors=FALSE)
############################ CIRCUITS AND RACES JOINED
#JOIN Races x Circuits
circIdLoc = circuitsF1 %>% select(circuitId, location)
racesIdCId = racesF1 %>% select(raceId, circuitId)
# [CIRCUITID, LOCATION, RACEID]
circXrac <- circIdLoc %>% inner_join(racesIdCId, by = "circuitId")
############################ CIRCUIT TO USE, CONNECT WITH CIRCUITID
#Number of races in a circuit [LOCATION, CIRCUITID]
raceCount <- count(circXrac, location, circuitId, sort = TRUE)
#RACE TO USE [LOCATION, CIRCUITID, N (of races)]
allowedCircuit <- raceCount %>% filter(n >= 10)
#allowedCircuit
############################ WINNERS PER RACE, CONNECTED TO RACEID WITH DRIVERID
#ALL WINNERS PER RACE [RACEID, DRIVERID]
raceWinners <- resultsF1 %>% filter(position == 1) %>% select(raceId, driverId)
#Driver ID and Name [DRIVERID, SURNAME]
driverIdName = driversF1 %>% select(driverId, surname)
#Winners of Allowed Races [RACEID, DRIVERID, SURNAME]
winnersAllCirc <- raceWinners %>% inner_join(driverIdName, by = "driverId")
#All Winners with RACEID
winnersRaceID <- winnersAllCirc %>% inner_join(cicXrac)
winnersRaceID
winnersRaceID <- winnersAllCirc %>% inner_join(circXrac)
winnersRaceID
winnersRaceID <- winnersAllCirc %>% inner_join(circXrac)
winnersRaceID = winnersRaceID %>% select(raceId, driverId, circuitId)
winnersRaceID
allowedCircuit
qualifyF1 <- read.csv("C:/Users/paolo/Desktop/F1_Circuit_Project/data/qualify.csv", header = TRUE, stringsAsFactors=FALSE)
qualifyF1 <- read.csv("C:/Users/paolo/Desktop/F1_Circuit_Project/data/qualifying.csv", header = TRUE, stringsAsFactors=FALSE)
View(qualifyF1)
raceWinners <- resultsF1 %>% filter(position == 1) %>% select(raceId, driverId)
raceQualifiers <- resultsF1 %>% filter(position == 1) %>% select(raceId, driverId)
library(readr)
library(dplyr)
library(tidyverse)
# DATA imported from CSV files
circuitsF1 <- read.csv("C:/Users/paolo/Desktop/F1_Circuit_Project/data/circuits.csv", header = TRUE, stringsAsFactors=FALSE)
racesF1 <- read.csv("C:/Users/paolo/Desktop/F1_Circuit_Project/data/races.csv", header = TRUE, stringsAsFactors=FALSE)
resultsF1 <- read.csv("C:/Users/paolo/Desktop/F1_Circuit_Project/data/results.csv", header = TRUE, stringsAsFactors=FALSE)
driversF1 <- read.csv("C:/Users/paolo/Desktop/F1_Circuit_Project/data/drivers.csv", header = TRUE, stringsAsFactors=FALSE)
qualifyF1 <- read.csv("C:/Users/paolo/Desktop/F1_Circuit_Project/data/qualifying.csv", header = TRUE, stringsAsFactors=FALSE)
############################ CIRCUITS AND RACES JOINED
#JOIN Races x Circuits
circIdLoc = circuitsF1 %>% select(circuitId, location)
racesIdCId = racesF1 %>% select(raceId, circuitId)
# [CIRCUITID, LOCATION, RACEID]
circXrac <- circIdLoc %>% inner_join(racesIdCId, by = "circuitId")
############################ CIRCUIT TO USE, CONNECT WITH CIRCUITID
#Number of races in a circuit [LOCATION, CIRCUITID]
raceCount <- count(circXrac, location, circuitId, sort = TRUE)
#RACE TO USE [LOCATION, CIRCUITID, N (of races)]
allowedCircuit <- raceCount %>% filter(n >= 10)
#allowedCircuit
############################ WINNERS PER RACE, CONNECTED TO RACEID WITH DRIVERID
#ALL WINNERS PER RACE [RACEID, DRIVERID]
raceWinners <- resultsF1 %>% filter(position == 1) %>% select(raceId, driverId)
#Driver ID and Name [DRIVERID, SURNAME]
driverIdName = driversF1 %>% select(driverId, surname)
#Winners of Allowed Races [RACEID, DRIVERID, SURNAME]
winnersAllCirc <- raceWinners %>% inner_join(driverIdName, by = "driverId")
#TABLE WITH EVERY WINNER OF EVERY RACE [RACEID, DRIVERID, CIRCUITID]
winnersRaceID <- winnersAllCirc %>% inner_join(circXrac)
winnersRaceID = winnersRaceID %>% select(raceId, driverId, circuitId)
#winnersRaceID
############################ QUALIFIERS PER RACE, CONNECTED TO RACEID WITH DRIVERID
#ALL QUALIFIERS PER RACE [RACEID, DRIVERID]
raceQualifiers <- resultsF1 %>% filter(position == 1) %>% select(raceId, driverId)
raceQualifiers
qualifyAllCirc <- raceQualifiers %>% inner_join(driverIdName, by = "driverId")
qualifyAllCirc
winnersRaceID
circXrac
winnersRaceID <- winnersAllCirc %>% inner_join(circXrac, by = "circuitId")
winnersAllCirc
allowedCircuit
raceWinners <- resultsF1 %>% filter(position == 1) %>% select(raceId, driverId)
raceWinners
raceWinners <- resultsF1 %>% filter(position == 1) %>% select(raceId, driverId)
raceWinners
raceWinners
raceWinners
resultsF1 %>% filter(position == 1)
resultsF1 %>% filter(position == 1) %>% select(raceId, driverId)
winnersRaceID <- winnersAllCirc %>% inner_join(allowedCircuit, by = "circuitId")
raceCount <- count(circXrac, location, circuitId, sort = TRUE)
raceCount
allowedCircuit
winnersAllCirc
winnersRaceID = winnersRaceID %>% select(raceId, driverId, circuitId)
winnersRaceID
winnersAllCirc
winnersAllCirc
circXrac
allowedCircuit
allowedRaces <- allowedCircuit %>% inner_join(circXrac, by = "raceId")
allowedRaces <- allowedCircuit %>% inner_join(circXrac, by = "circuitId")
allowedRaces
allowedRaces <- allowedCircuit %>% inner_join(circXrac, by = "circuitId") %>% select(circuitId, raceId)
allowedRaces
winnersRaceID <- winnersAllCirc %>% inner_join(allowedRaces, by = "raceId")
winnersRaceID
qualifyRaceID <- qualifyAllCirc %>% inner_join(allowedRaces, by = "raceId")
qualifyRaceID = qualifyRaceID %>% select(raceId, driverId, circuitId)
qualifyRaceID
winnersRaceID <- winnersAllCirc %>% inner_join(allowedRaces, by = "raceId")
winnersRaceID
qualifyRaceID
qualifyRaceID <- qualifyAllCirc %>% inner_join(allowedRaces, by = "raceId")
qualifyRaceID
qualifyRaceID = qualifyRaceID %>% select(raceId, driverId, surname)
qualifyRaceID
hasWon <- raceQualifiers %>% inner_join(raceWinners, by = "raceId")
hasWon
hasWon <- winnersRaceID %>% inner_join(qualifyRaceID, by = "raceId")
hasWon
raceQualifiers <- qualifyF1 %>% filter(position == 1) %>% select(raceId, driverId)
#Qualifiers of Allowed Races [RACEID, DRIVERID, SURNAME]
qualifyAllCirc <- raceQualifiers %>% inner_join(driverIdName, by = "driverId")
#TABLE WITH EVERY POLE OF EVERY RACE ALLOWED WITH CIRCUITID [RACEID, DRIVERID, CIRCUITID]
qualifyRaceID <- qualifyAllCirc %>% inner_join(allowedRaces, by = "raceId")
qualifyRaceID = qualifyRaceID %>% select(raceId, driverId, surname)
hasWon <- winnersRaceID %>% inner_join(qualifyRaceID, by = "raceId")
hasWon
View(allowedCircuit)
View(circIdLoc)
View(circuitsF1)
pitstopsF1 <- read.csv("C:/Users/paolo/Desktop/F1_Circuit_Project/data/pitstops.csv", header = TRUE, stringsAsFactors=FALSE)
library(readr)
library(dplyr)
library(tidyverse)
# DATA imported from CSV files
circuitsF1 <- read.csv("C:/Users/paolo/Desktop/F1_Circuit_Project/data/circuits.csv", header = TRUE, stringsAsFactors=FALSE)
racesF1 <- read.csv("C:/Users/paolo/Desktop/F1_Circuit_Project/data/races.csv", header = TRUE, stringsAsFactors=FALSE)
resultsF1 <- read.csv("C:/Users/paolo/Desktop/F1_Circuit_Project/data/results.csv", header = TRUE, stringsAsFactors=FALSE)
driversF1 <- read.csv("C:/Users/paolo/Desktop/F1_Circuit_Project/data/drivers.csv", header = TRUE, stringsAsFactors=FALSE)
qualifyF1 <- read.csv("C:/Users/paolo/Desktop/F1_Circuit_Project/data/qualifying.csv", header = TRUE, stringsAsFactors=FALSE)
pitstopsF1 <- read.csv("C:/Users/paolo/Desktop/F1_Circuit_Project/data/pitstops.csv", header = TRUE, stringsAsFactors=FALSE)
############################################################## USEFUL ##############################################################
#Driver ID and Name [DRIVERID, SURNAME]
driverIdName = driversF1 %>% select(driverId, surname)
# CIRCUITS AND RACES JOINED
#JOIN Races x Circuits
circIdLoc = circuitsF1 %>% select(circuitId, location)
racesIdCId = racesF1 %>% select(raceId, circuitId)
#TABLE WITH EVERY CIRCUIT JOINED WITH EVERY RACE [CIRCUITID, LOCATION, RACEID]
circXrac <- circIdLoc %>% inner_join(racesIdCId, by = "circuitId")
############################################################## USEFUL ##############################################################
############################ CIRCUIT ALLOWED TO USE, CONNECT TO THIS WITH CIRCUITID
#Number of races in a circuit [LOCATION, CIRCUITID]
raceCount <- count(circXrac, location, circuitId, sort = TRUE)
#raceCount #TO BE USED FOR GRAPHIC #TO BE USED FOR GRAPHIC #TO BE USED FOR GRAPHIC #TO BE USED FOR GRAPHIC
#RACE ALLOWED TO USE [LOCATION, CIRCUITID, N (of races)]
allowedCircuit <- raceCount %>% filter(n >= 10)
#allowedCircuit #TO BE USED FOR GRAPHIC #TO BE USED FOR GRAPHIC #TO BE USED FOR GRAPHIC #TO BE USED FOR GRAPHIC
#CIRCUIT ALLOWED FOR EVERY RACE
allowedRaces <- allowedCircuit %>% inner_join(circXrac, by = "circuitId") %>% select(circuitId, raceId)
############################ WINNERS PER RACE, CONNECTED TO RACEID WITH DRIVERID
#ALL WINNERS PER RACE [RACEID, DRIVERID]
raceWinners <- resultsF1 %>% filter(position == 1) %>% select(raceId, driverId)
#Winners of All Races [RACEID, DRIVERID, SURNAME]
winnersAllCirc <- raceWinners %>% inner_join(driverIdName, by = "driverId")
#TABLE WITH EVERY WINNER OF EVERY RACE ALLOWED WITH CIRCUITID [RACEID, DRIVERID, CIRCUITID]
winnersRaceID <- winnersAllCirc %>% inner_join(allowedRaces, by = "raceId")
#winnersRaceID = winnersRaceID %>% select(raceId, driverId, circuitId)
############################ POLE QUALIFIERS PER RACE, CONNECTED TO RACEID WITH DRIVERID (NEW QUALIFY SISTEM FROM 2006 TO PRESENT)
#ALL POLE QUALIFIERS PER RACE [RACEID, DRIVERID]
raceQualifiers <- qualifyF1 %>% filter(position == 1) %>% select(raceId, driverId)
#Qualifiers of Allowed Races [RACEID, DRIVERID, SURNAME]
qualifyAllCirc <- raceQualifiers %>% inner_join(driverIdName, by = "driverId")
#TABLE WITH EVERY POLE OF EVERY RACE ALLOWED WITH CIRCUITID [RACEID, DRIVERID, CIRCUITID]
qualifyRaceID <- qualifyAllCirc %>% inner_join(allowedRaces, by = "raceId")
qualifyRaceID = qualifyRaceID %>% select(raceId, driverId, surname)
#qualifyRaceID = qualifyRaceID %>% select(raceId, driverId, circuitId)
############################ FUNCTION CONFRONTING POLE QUALIFIERS AND RACE WINNERS - CHECKING ONLY FIRST POSITION CHANGES
#WINNERS AND POLES [RACEID, DRIVERID.X, SURNAME.X, CIRCUITID, DRIVERID.Y, SURNAME.Y] WHERE X = WINNER AND Y = POLE
winnersAndPoles <- winnersRaceID %>% inner_join(qualifyRaceID, by = "raceId")
#FUNCTION THAT CHECK IF THE WINNER HAS WON FROM POLE OR NOT
#put a select from winners and poles?
winnerFromPole <- winnersAndPoles
winnerFromPole$hasWonFromPole <- ifelse(winnersAndPoles$driverId.x == winnersAndPoles$driverId.y, 'yes', 'no')
#WINNERFROMPOLECOUNT [CIRCUITID, HASWONFROMPOLE, N]
winnerFromPoleCount <- count(winnerFromPole, circuitId, hasWonFromPole, sort = FALSE)
#winnerFromPoleCount #TO BE USED FOR GRAPHIC #TO BE USED FOR GRAPHIC #TO BE USED FOR GRAPHIC #TO BE USED FOR GRAPHIC #TO BE USED FOR GRAPHIC
############################ DIFFERENT WINNERS FOR CIRCUIT
#tabella circuiti permessi circuitid
#tabella piloti vincitori con pilotaid, raceid, circuitid
#count delle tabelle sopra
############################ DIFFERENT POLE QUALIFIERS PER CIRCUIT
############################ NUMBER OF ALL POSITION CHANGES PER CIRCUIT - USE RESULTF1
############################ PIT STOP NUMBER - MORE VARIABLE RACE
#MEAN PIT STOP TIME
############################ MOST WIN OF A SINGLE DRIVER PER CIRCUIT
############################ MOST POLE OF A SINGLE DRIVER PER CIRCUIT
winnersRaceID
allowedRaces
differentWinnersPerRace <- winnersRaceID %>% inner_join(allowedCircuit, by = "raceid")
differentWinnersPerRace <- winnersRaceID %>% inner_join(allowedCircuit, by = "circuitid")
differentWinnersPerRace <- winnersRaceID %>% inner_join(allowedCircuit, by = "circuitId")
differentWinnersPerRace
differentWinnersPerRace <- winnersRaceID %>% inner_join(allowedRaces, by = "raceId")
differentWinnersPerRace
differentWinnersPerRace <- winnersRaceID %>% inner_join(allowedRaces, by = "circuitId")
differentWinnersPerRace
winnersRaceID
winnersAllCirc
winnersDriCirc <- winnersRaceID %>% select(driverId, circuitId, surname)
differentWinnersPerCircuit <- winnersDriCirc %>% inner_join(allowedRaces, by = "circuitId")
differentWinnersPerCircuit
differentWinnersPerCircuit %>% count(circtuitId)
winnersDriCirc <- winnersRaceID %>% select(driverId, circuitId, surname)
differentWinnersPerCircuit <- winnersDriCirc %>% inner_join(allowedRaces, by = "circuitId")
winsInACircuit %>% count(differentWinnersPerCircuit, circtuitId)
winsInACircuit
winnersDriCirc <- winnersRaceID %>% select(driverId, circuitId, surname)
differentWinnersPerCircuit <- winnersDriCirc %>% inner_join(allowedRaces, by = "circuitId")
winsInACircuit %>% count(differentWinnersPerCircuit, circtuitId)
winsInACircuit
winnersDriCirc <- winnersRaceID %>% select(driverId, circuitId, surname)
differentWinnersPerCircuit <- winnersDriCirc %>% inner_join(allowedRaces, by = "circuitId")
winsInACircuit <- count(differentWinnersPerCircuit, circtuitId)
winsInACircuit
winsInACircuit <- count(differentWinnersPerCircuit, circtuitId, driverId)
winsInACircuit
winsInACircuit <- count(differentWinnersPerCircuit, circtuitId, driverId, sort = FALSE)
winsInACircuit
differentWinnersPerCircuit
winsInACircuit <- count(differentWinnersPerCircuit, circuitId, driverId, sort = FALSE)
winsInACircuit
winnersDriCirc <- winnersRaceID %>% select(driverId, circuitId, surname)
winnersDriCirc
winnersDriCirc %>% group_by(circuitId)
winnersDriCirc <- winnersRaceID %>% select(driverId, circuitId, surname)
winnersDriCirc <- group_by(circuitId)
winnersDriCirc %>% group_by(circuitId)
winnersDriCirc
winnersWChircuitGrouped <- winnersDriCirc %>% group_by(circuitId)
winnersWChircuitGrouped
winnersWChircuitGrouped <- count(winnersDriCirc, circuitId, driverId)
winnersWChircuitGrouped
View(driverIdName)
View(driverIdName)
winnersDriCirc <- winnersRaceID %>% select(driverId, circuitId, surname)
winnersWChircuitGrouped <- count(winnersDriCirc, circuitId, driverId)
winnersWChircuitGroupedSurname <- winnersWChircuitGrouped %>% inner_join(driverIdName, by = "driverId")
winnersWChircuitGroupedSurname
winnersWChircuitGroupSurCId <- winnersWChircuitGroupedSurname %>% inner_join(circIdLoc, by = "circuitID")
winnersWChircuitGroupSurCId
winnersDriCirc <- winnersRaceID %>% select(driverId, circuitId, surname)
winnersWChircuitGrouped <- count(winnersDriCirc, circuitId, driverId)
winnersWChircuitGroupedSurname <- winnersWChircuitGrouped %>% inner_join(driverIdName, by = "driverId") #for check
winnersWChircuitGroupedSurname #for check
winnersWChircuitGroupSurCId <- winnersWChircuitGroupedSurname %>% inner_join(circIdLoc, by = "circuitID")
winnersWChircuitGroupSurCId
winnersDriCirc <- winnersRaceID %>% select(driverId, circuitId, surname)
winnersWChircuitGrouped <- count(winnersDriCirc, circuitId, driverId)
winnersWChircuitGroupedSurname <- winnersWChircuitGrouped %>% inner_join(driverIdName, by = "driverId") #for check
winnersWChircuitGroupedSurname #for check
winnersWChircuitGroupSurCId <- winnersWChircuitGroupedSurname %>% inner_join(circIdLoc, by = "circuitId")
winnersWChircuitGroupSurCId
winnersDriCirc <- winnersRaceID %>% select(driverId, circuitId, surname)
winnersWChircuitGrouped <- count(winnersDriCirc, circuitId, driverId, sort = TRUE)
winnersWChircuitGroupedSurname <- winnersWChircuitGrouped %>% inner_join(driverIdName, by = "driverId") #for check
winnersWChircuitGroupedSurname #for check
winnersWChircuitGroupSurCId <- winnersWChircuitGroupedSurname %>% inner_join(circIdLoc, by = "circuitId") #for check
winnersWChircuitGroupSurCId #for check
winnersDriCirc <- winnersRaceID %>% select(driverId, circuitId, surname)
winnersWCircuitGrouped <- count(winnersDriCirc, circuitId, driverId, sort = TRUE) # USE THIS ONE
winnersWCircuitGroupedSurname <- winnersWChircuitGrouped %>% inner_join(driverIdName, by = "driverId") #for check
#winnersWCircuitGroupedSurname #for check
winnersWCircuitGroupSurCId <- winnersWChircuitGroupedSurname %>% inner_join(circIdLoc, by = "circuitId") #for check
#winnersWCircuitGroupSurCId #for check
differentWinnersPerCircuit <- count(winnersWCircuitGrouped, circuitId, driverId)
differentWinnersPerCircuit
winnersWCircuitGrouped
winnersWCircuitGroupSurCId
differentWinnersPerCircuit <- count(winnersWCircuitGroupSurCId, circuitId, driverId)
differentWinnersPerCircuit
differentWinnersPerCircuit <- count(winnersWCircuitGroupSurCId, circuitId)
differentWinnersPerCircuit
winnersWCircuitGroupSurCId
differentWinnersPerCircuit <- count(winnersWCircuitGroupSurCId, circuitId, location)
differentWinnersPerCircuit
winnersWCircuitGroupSurCId
allowedRaces
winnersDriCirc
winnersRaceID
raceWinners
winnersAllCirc
raceWinners
winnersRaceID
winnersDriCirc
winnersWCircuitGrouped
winnersDriCirc <- winnersRaceID %>% select(driverId, circuitId, surname)
winnersWCircuitGrouped <- count(winnersDriCirc, circuitId, driverId, sort = TRUE) # USE THIS ONE
winnersWCircuitGroupedSurname <- winnersWCircuitGrouped %>% inner_join(driverIdName, by = "driverId") #for check
#winnersWCircuitGroupedSurname #for check
winnersWCircuitGroupSurCId <- winnersWCircuitGroupedSurname %>% inner_join(circIdLoc, by = "circuitId") #for check
#winnersWCircuitGroupSurCId #for check
differentWinnersPerCircuit <- count(winnersWCircuitGroupSurCId, circuitId, location)
differentWinnersPerCircuit
winnersWCircuitGroupSurCId
winnersWCircuitGroupedSurname
winnersWCircuitGrouped
winnersDriCirc
winnersWCircuitGroupSurCId
differentWinnersPerCircuit <- winnersWChircuitGroupSurCId %>% group_by(circuitId) #count(winnersWCircuitGroupSurCId, circuitId, location)
differentWinnersPerCircuit
differentWinnersPerCircuit <- winnersWChircuitGroupSurCId %>% group_by(circuitId, location) #count(winnersWCircuitGroupSurCId, circuitId, location)
differentWinnersPerCircuit
differentWinnersPerCircuit <- winnersWChircuitGroupSurCId %>% group_by(location) #count(winnersWCircuitGroupSurCId, circuitId, location)
differentWinnersPerCircuit
library(readr)
library(dplyr)
library(tidyverse)
# DATA imported from CSV files
circuitsF1 <- read.csv("C:/Users/paolo/Desktop/F1_Circuit_Project/data/circuits.csv", header = TRUE, stringsAsFactors=FALSE)
racesF1 <- read.csv("C:/Users/paolo/Desktop/F1_Circuit_Project/data/races.csv", header = TRUE, stringsAsFactors=FALSE)
resultsF1 <- read.csv("C:/Users/paolo/Desktop/F1_Circuit_Project/data/results.csv", header = TRUE, stringsAsFactors=FALSE)
driversF1 <- read.csv("C:/Users/paolo/Desktop/F1_Circuit_Project/data/drivers.csv", header = TRUE, stringsAsFactors=FALSE)
qualifyF1 <- read.csv("C:/Users/paolo/Desktop/F1_Circuit_Project/data/qualifying.csv", header = TRUE, stringsAsFactors=FALSE)
pitstopsF1 <- read.csv("C:/Users/paolo/Desktop/F1_Circuit_Project/data/pitstops.csv", header = TRUE, stringsAsFactors=FALSE)
############################################################## USEFUL ##############################################################
#Driver ID and Name [DRIVERID, SURNAME]
driverIdName = driversF1 %>% select(driverId, surname)
# CIRCUITS AND RACES JOINED
#JOIN Races x Circuits
circIdLoc = circuitsF1 %>% select(circuitId, location)
racesIdCId = racesF1 %>% select(raceId, circuitId)
#TABLE WITH EVERY CIRCUIT JOINED WITH EVERY RACE [CIRCUITID, LOCATION, RACEID]
circXrac <- circIdLoc %>% inner_join(racesIdCId, by = "circuitId")
############################################################## USEFUL ##############################################################
############################ CIRCUIT ALLOWED TO USE, CONNECT TO THIS WITH CIRCUITID
#Number of races in a circuit [LOCATION, CIRCUITID]
raceCount <- count(circXrac, location, circuitId, sort = TRUE)
#raceCount #TO BE USED FOR GRAPHIC #TO BE USED FOR GRAPHIC #TO BE USED FOR GRAPHIC #TO BE USED FOR GRAPHIC
#RACE ALLOWED TO USE [LOCATION, CIRCUITID, N (of races)]
allowedCircuit <- raceCount %>% filter(n >= 10)
#allowedCircuit #TO BE USED FOR GRAPHIC #TO BE USED FOR GRAPHIC #TO BE USED FOR GRAPHIC #TO BE USED FOR GRAPHIC
#CIRCUIT ALLOWED FOR EVERY RACE
allowedRaces <- allowedCircuit %>% inner_join(circXrac, by = "circuitId") %>% select(circuitId, raceId)
############################ WINNERS PER RACE, CONNECTED TO RACEID WITH DRIVERID
#ALL WINNERS PER RACE [RACEID, DRIVERID]
raceWinners <- resultsF1 %>% filter(position == 1) %>% select(raceId, driverId)
#Winners of All Races [RACEID, DRIVERID, SURNAME]
winnersAllCirc <- raceWinners %>% inner_join(driverIdName, by = "driverId")
#TABLE WITH EVERY WINNER OF EVERY RACE ALLOWED WITH CIRCUITID [RACEID, DRIVERID, CIRCUITID]
winnersRaceID <- winnersAllCirc %>% inner_join(allowedRaces, by = "raceId")
#winnersRaceID = winnersRaceID %>% select(raceId, driverId, circuitId)
############################ POLE QUALIFIERS PER RACE, CONNECTED TO RACEID WITH DRIVERID (NEW QUALIFY SISTEM FROM 2006 TO PRESENT)
#ALL POLE QUALIFIERS PER RACE [RACEID, DRIVERID]
raceQualifiers <- qualifyF1 %>% filter(position == 1) %>% select(raceId, driverId)
#Qualifiers of Allowed Races [RACEID, DRIVERID, SURNAME]
qualifyAllCirc <- raceQualifiers %>% inner_join(driverIdName, by = "driverId")
#TABLE WITH EVERY POLE OF EVERY RACE ALLOWED WITH CIRCUITID [RACEID, DRIVERID, CIRCUITID]
qualifyRaceID <- qualifyAllCirc %>% inner_join(allowedRaces, by = "raceId")
qualifyRaceID = qualifyRaceID %>% select(raceId, driverId, surname)
#qualifyRaceID = qualifyRaceID %>% select(raceId, driverId, circuitId)
############################ FUNCTION CONFRONTING POLE QUALIFIERS AND RACE WINNERS - CHECKING ONLY FIRST POSITION CHANGES
#WINNERS AND POLES [RACEID, DRIVERID.X, SURNAME.X, CIRCUITID, DRIVERID.Y, SURNAME.Y] WHERE X = WINNER AND Y = POLE
winnersAndPoles <- winnersRaceID %>% inner_join(qualifyRaceID, by = "raceId")
#FUNCTION THAT CHECK IF THE WINNER HAS WON FROM POLE OR NOT
#put a select from winners and poles?
winnerFromPole <- winnersAndPoles
winnerFromPole$hasWonFromPole <- ifelse(winnersAndPoles$driverId.x == winnersAndPoles$driverId.y, 'yes', 'no')
#WINNERFROMPOLECOUNT [CIRCUITID, HASWONFROMPOLE, N]
winnerFromPoleCount <- count(winnerFromPole, circuitId, hasWonFromPole, sort = FALSE)
#winnerFromPoleCount #TO BE USED FOR GRAPHIC #TO BE USED FOR GRAPHIC #TO BE USED FOR GRAPHIC #TO BE USED FOR GRAPHIC #TO BE USED FOR GRAPHIC
############################ DIFFERENT WINNERS FOR CIRCUIT
#916 winners allowed
winnersDriCirc <- winnersRaceID %>% select(driverId, circuitId, surname)
winnersWCircuitGrouped <- count(winnersDriCirc, circuitId, driverId, sort = TRUE) # USE THIS ONE
winnersWCircuitGroupedSurname <- winnersWCircuitGrouped %>% inner_join(driverIdName, by = "driverId") #for check
#winnersWCircuitGroupedSurname #for check
winnersWCircuitGroupSurCId <- winnersWCircuitGroupedSurname %>% inner_join(circIdLoc, by = "circuitId") #for check
#winnersWCircuitGroupSurCId #for check
differentWinnersPerCircuit <- count(winnersWChircuitGroupSurCId, location) #count(winnersWCircuitGroupSurCId, circuitId, location)
differentWinnersPerCircuit
############################ DIFFERENT POLE QUALIFIERS PER CIRCUIT
############################ NUMBER OF ALL POSITION CHANGES PER CIRCUIT - USE RESULTF1
############################ PIT STOP NUMBER - MORE VARIABLE RACE
#MEAN PIT STOP TIME?
############################ MOST WIN OF A SINGLE DRIVER PER CIRCUIT
############################ MOST POLE OF A SINGLE DRIVER PER CIRCUIT
View(winnersWCircuitGroupedSurname)
View(winnersWCircuitGrouped)
differentWinnersPerCircuit
#winnersWCircuitGroupSurCId #for check
differentWinnersPerCircuit <- count(winnersWChircuitGroupSurCId, location) #count(winnersWCircuitGroupSurCId, circuitId, location)
differentWinnersPerCircuit
differentWinnersPerCircuit <- count(winnersWChircuitGroupSurCId, location, circuitId) #count(winnersWCircuitGroupSurCId, circuitId, location)
differentWinnersPerCircuit
winnersDriCirc <- winnersRaceID %>% select(driverId, circuitId, surname)
winnersWCircuitGrouped <- count(winnersDriCirc, circuitId, driverId, sort = TRUE) # USE THIS ONE
winnersWCircuitGroupedSurname <- winnersWCircuitGrouped %>% inner_join(driverIdName, by = "driverId") #for check
#winnersWCircuitGroupedSurname #for check
winnersWCircuitGroupSurCId <- winnersWCircuitGroupedSurname %>% inner_join(circIdLoc, by = "circuitId") #for check
#winnersWCircuitGroupSurCId #for check
differentWinnersPerCircuit <- count(winnersWChircuitGroupSurCId, location, circuitId) #count(winnersWCircuitGroupSurCId, circuitId, location)
differentWinnersPerCircuit
differentWinnersPerCircuit <- count(winnersWChircuitGroupSurCId, location, circuitId) #count(winnersWCircuitGroupSurCId, circuitId, location)
differentWinnersPerCircuit %>% count(winnersWChircuitGroupSurCId, location, circuitId) #count(winnersWCircuitGroupSurCId, circuitId, location)
differentWinnersPerCircuit <- count(winnersWChircuitGroupSurCId, location, circuitId) #count(winnersWCircuitGroupSurCId, circuitId, location)
differentWinnersPerCircuit <- count(winnersWCircuitGroupSurCId, location, circuitId) #count(winnersWCircuitGroupSurCId, circuitId, location)
differentWinnersPerCircuit
